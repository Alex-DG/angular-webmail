{
  "author": {
    "name": "constantology",
    "email": "christos@muigui.com",
    "url": "http://muigui.com"
  },
  "description": "useful functions for working with Arrays and Objects",
  "devDependencies": {
    "chai": "latest",
    "mocha": "latest",
    "grunt-contrib-concat": "latest",
    "grunt-contrib-uglify": "latest",
    "grunt-contrib-watch": "latest"
  },
  "engines": {
    "node": ">= 0.8.x"
  },
  "keywords": [
    "array",
    "iter",
    "object"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://raw.github.com/muigui/useful-iter/master/LICENSE"
    }
  ],
  "main": "./index.js",
  "name": "useful-iter",
  "repository": {
    "type": "git",
    "url": "git@github.com:muigui/useful-iter.git"
  },
  "scripts": {
    "test": "mocha -c --ignore-leaks -R spec -u tdd ./test/runner.js"
  },
  "version": "0.0.3",
  "readme": "\n# useful-iter\n\n  useful functions for working with Arrays and Objects\n\n## Installation\n\n  Install with [component(1)](http://component.io):\n\n    $ component install muigui/useful-iter\n\n  Install with npm:\n\n    $ npm install useful-iter\n\n## API\n\n### iter( item:Mixed ):Boolean\nReturns `true` if the passed item can be iterated over.\n\n### iter.aggregate( item:Mixed, accumulator:Mixed, iterator:Function[, context:Object] ):Mixed\nWorks similar to [Array.prototype.reduce](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/reduce).\n\nUnlike `reduce`, you can also supply an optional `context` Object to `aggregate`.\n\n`aggregate` will work on any iterable Object, so Array, Arguments, Function, HTMLCollection, NodeList, Object, etc.\n\nIf no `context` Object is supplied, the `item` being iterated over will be used as the `context` Object.\n\nThe `iterator` Function will receive 5 arguments:\n\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\"><thead>\n\t<tr><th>argument</th><th>type</th><th>description</th></tr>\n</thead><tbody>\n\t<tr><td>accumulator</td><td>When the <code>iterator</code> Function is first called, this will be the initially supplied <code>accumulator</code>, after which it will be previous value returned by the <code>iterator</code> Function.</td></tr>\n\t<tr><td>value</td><td>The current item in the iteration.</td></tr>\n\t<tr><td>index_or_key</td><td>The current <code>index:Number</code> or <code>key:String</code> corresponding to the current <code>value</code> in the iteration.</td></tr>\n\t<tr><td>item</td><td>The <code>item</code> being iterated over.</td></tr>\n</tbody></table>\n\n#### Example:\n\n```javascript\n\n\tvar iter = require( 'useful-iter' );\n\n    iter.aggregate( { one : 1, two : 2, three : 3 }, [], function( accumulator, value, key ) {\n    \taccumulator.push( key );\n    \treturn accumulator;\n    } ); // returns => ['one', 'two', 'three'];\n\n    iter.aggregate( { one : 1, two : 2, three : 3 }, 1, function( accumulator, value, key ) {\n    \treturn accumulator += value;\n    } ); // returns => 7;\n\n    iter.aggregate( iter.range( 0, 10 ), 0, function( accumulator, value, index ) {\n    \treturn accumulator += ( value * index );\n    } ); // returns => 385;\n\n```\n\n### iter.equal( a:Array|Object, b:Array|Object ):Boolean\nReturns `true` if both `a` and `b` deeply equal each other, `false` otherwise.\n\n#### Example:\n\n```javascript\n\n\tvar copy = require( 'useful-copy' ),\n\t\titer = require( 'useful-iter' );\n\n    var foo = { one : 1, two : 2, three : 3 },\n        bar = copy( {}, foo );\n\n    iter.equal( foo, bar ); // returns => true\n\n    bar.four = 4;\n\n    iter.equal( foo, bar ); // returns => false\n\n```\n\n### iter.invoke( items:Array, method:String[, arg1:Mixed, arg2:Mixed, ..., argN:Mixed] ):Array\nExecutes the passed `method` — **NOTE:** `method` is a String, and should be the name of `method` that exists on each item in the Array — passing any extra arguments to each method call.\n\n#### Example:\n\n```javascript\n\n    iter.invoke( ['lorem', 'ipsum', 'dolor', 'sit', 'amet'], 'toUpperCase' ); // returns => [\"LOREM\", \"IPSUM\", \"DOLOR\", \"SIT\", \"AMET\"]\n\n    iter.invoke( [1, 2, 3, 4, 5, 6, 7, 8] 'toString', 2 );                    // returns => ['1', '10', '11', '100', '101', '110', '111', '1000']\n\n```\n\n### iter.len( item:Mixed ):Number\nTries the returns the `length` property of the passed `item`.\n\n#### Example:\n\n```javascript\n\n\tvar iter = require( 'useful-iter' );\n\n    iter.len( { one : 1, two : 2, three : 3 } ); // returns => 3\n\n    iter.len( [1, 2, 3] );                       // returns => 3\n\n    iter.len( 'foobar' );                        // returns => 6\n\n    iter.len( { one : 1, two : 2, three : 3 } ) === Object.keys( { one : 1, two : 2, three : 3 } ).length\n    // returns => true\n\n```\n\n### iter.pluck( items:Array, key:String[, only_existing:Boolean] ):Array\nReturns a new Array where all the items are the values of the passed property `key`.\n\nIf `only_existing` is set to `true` then all `null` and `undefined` values will be omitted from the returned Array.\n\n**NOTEL** if you want to get at properties deeper than one level down, you can simply supply `the.correct.path`.\n\n#### Example:\n\n```javascript\n\n    var data = [{ data : { value : 'foo' } }, { data : { value : 'bar' } }, {}, { value : 'blim' }, { data : { value : 'blam' } }];\n\n    // harder to read\n    iter.pluck( iter.pluck( data, 'data' ), 'value' ); // returns => [\"foo\", \"bar\", undefined, undefined, \"blam\"]\n\n    // easier on the eye\n    iter.pluck( data, 'data.value' );                  // returns => [\"foo\", \"bar\", undefined, undefined, \"blam\"]\n\n    // return only existing values\n    iter.pluck( data, 'data.value', true );            // returns => [\"foo\", \"bar\", \"blam\"]\n\n```\n\n### iter.range( begin:Number|String, end:Number|String ):Array\nReturns an Array starting at `begin` where each value is incremented by `1` until `end` is reached.\n\n#### Example:\n\n```javascript\n\n\tvar iter = require( 'useful-iter' );\n\n    iter.range(  1,   10 );  // returns => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    iter.range( 20, 1000 );  // returns => [20, 21, 22, ..., 1000]\n\n    iter.range( 'A', 'z' );  // returns => ['A', 'B', 'C', ..., 'x', 'y', 'z']\n    iter.range( 'α', 'ω' ); // returns => ['α', 'β', 'γ', ..., 'χ', 'ψ', 'ω']\n\n```\n\n**NOTE:** Only the first character will be incremented in a `String` range.\n\n### iter.remove( item:Array, value_or_index1:Number|Mixed|Number[]|Mixed[][, value_or_index2:Number|Mixed, ..., value_or_indexN:Number|Mixed] ):item\n### iter.remove( item:Object, property1:String|String[][, property2:String, ..., propertyN:String] ):item\nRemoves items from the passed Array or Object and returns the passed Array or Object.\n\nIf removing items from an Array, you can either pass the index of the item you want to remove or the item itself.\nIf removing items from an Object, you simply pass the key of the item you want to remove.\n\n#### Example:\n\n```javascript\n\n\tvar iter = require( 'useful-iter' );\n\n    var foo_arr = ['one', 'two', 'three'],\n       foo_obj = { one : 1, two : 2, three : 3 };\n\n    iter.remove( foo_arr, 'one', 'three' );   // returns => ['two']\n\n    iter.remove( foo_arr, ['one', 'three'] ); // same as above\n\n    iter.remove( foo_arr, 0, 2 );             // same as above\n\n    iter.remove( foo_arr, [0, 2] );           // same as above\n\n    iter.remove( foo_obj, 'one', 'three' );   // returns => { two : 2 }\n\n    iter.remove( foo_obj, ['one', 'three'] ); // same as above\n\n```\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011 christos \"constantology\" constandinou http://muigui.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/muigui/useful-iter/issues"
  },
  "homepage": "https://github.com/muigui/useful-iter",
  "_id": "useful-iter@0.0.3",
  "_from": "useful-iter@latest"
}
